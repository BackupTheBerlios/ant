% implementation of references

% A function to generate unique anonymous reference ids.

\beginALdeclarations

ps_gen_unique_ref id :=
  local ref_cnt;
  do
    ps_get_global ref_cnt UniqueRefCount;
    ps_set_global UniqueRefCount (ref_cnt + 1);
    id = to_symbol (format_string "unique reference %d" ref_cnt);
  end;

\endALdeclarations

\ALcommand{
  ps_set_global UniqueRefCount 0
}

% Making global variables persistent across runs of ant.

\beginALdeclarations

ps_declare_persistent_global sym :=
  local table;
  do
    ps_get_global table PersistentGlobals;
    ps_set_global PersistentGlobals (insert sym table)
    where
      insert sym []     := [sym];
      insert sym [s:ss] := if s == sym then
                             [s:ss]
                           else
                             [s : insert sym ss]
                           end
    end
  end;

ps_store_persistent_globals file_name ps :=
  local table;
  do
    ps_get_global table PersistentGlobals;

    iter table []
    where
      iter [] globals ps :=
        if serialise file_name globals then
          ps
        else
          ps_warning ("Couldn't store globals to file `" + file_name + "'.\n") ps
        end;
      iter [s:ss] globals ps :=
        local g;
        do
          ps_get_global g s;
          iter ss [(s,g) : globals];
        end
        ps;
    end;
  end
  ps;

ps_restore_persistent_globals file_name :=
  local globals := unserialise file_name;
  do
    iter globals;
  end
  where
    iter [(s,g) : pairs] ps := iter pairs (ps_set_global s g ps);
    iter _               ps := ps;
  end;

ps_at_exit ps :=
  ps_store_persistent_globals (ps_job_name + ".gdb") ps;

\endALdeclarations

% Restore the global variables.

\ALcommand{
  do
    ps_set_global PersistentGlobals [];
    ps_restore_persistent_globals (ps_job_name + ".gdb");
  end
}

% page numbers

\beginALdeclarations

ps_get_current_page page :=
  local sym;
  do
    ps_gen_unique_ref sym;
    ps_declare_persistent_global sym;
;;    ps_set_global sym 0;
    ps_page_command { pi _ := ps_set_global sym (pi PageNo) };
    ps_get_global page sym;
  end;

\endALdeclarations

% |\currentpage| returns the current page number as arabic number.

\definecommand\currentpage{%
  \ALcommand{
    local page;
    do
      ps_get_current_page page;
      ps_insert_string (format_string "%d" page);
    end
  }}
\definecommand\saveposition[m]{%
  \ALcommand{
    local page;
    do
      ps_get_current_page page;
      ps_define_command "#1"
        (ps_insert_string (format_string "%d" page))
        { res str := res = format_string "%d" page + str };
    end
  }}

% vim:set ft=tex:
